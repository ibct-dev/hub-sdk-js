"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CommitOperation_1 = require("./CommitOperation");
/**
 * Simple Commit implementation to be used in unit tests
 */
var TestCommit = /** @class */ (function () {
    /**
     * Constructs a new test commit. Will contruct values if not passed
     * @param options Optional values to set in the commit
     */
    function TestCommit(options) {
        if (options && options.unprotected) {
            this.unprotected = options.unprotected;
        }
        else {
            this.unprotected = {
                rev: this.getHash('revision'),
            };
        }
        this.protected = {
            interface: 'Test',
            context: 'example.com/',
            type: this.getHash('type'),
            operation: [CommitOperation_1.default.Create, CommitOperation_1.default.Update, CommitOperation_1.default.Delete][Math.floor(Math.random() * 3)],
            committed_at: new Date().toISOString(),
            commit_strategy: 'test',
            sub: 'did:test:owner.id',
            kid: 'did:test:issuer.id#key-1',
            iss: 'did:test:issuer.id',
            object_id: this.getHash('object'),
        };
        if (options && options.protected) {
            this.protected = Object.assign(this.protected, options.protected);
        }
        if (options && options.payload) {
            this.payload = options.payload;
        }
        else {
            this.payload = {
                test: this.getHash('test value: '),
            };
        }
    }
    /**
     * Generates a random string
     * @param prefix prefix to add to the string
     */
    TestCommit.prototype.getHash = function (prefix) {
        return (prefix || '') + Math.round(Math.random() * Number.MAX_SAFE_INTEGER).toString(32);
    };
    TestCommit.prototype.getHeaders = function () {
        return Object.assign({}, this.unprotected, this.protected);
    };
    TestCommit.prototype.getProtectedHeaders = function () {
        return this.protected;
    };
    TestCommit.prototype.getPayload = function () {
        return this.payload;
    };
    return TestCommit;
}());
exports.default = TestCommit;
//# sourceMappingURL=TestCommit.js.map