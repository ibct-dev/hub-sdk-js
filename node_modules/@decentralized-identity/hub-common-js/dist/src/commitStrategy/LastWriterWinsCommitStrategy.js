"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CommitStrategy_1 = require("./CommitStrategy");
var BasicCommitStrategy_1 = require("./BasicCommitStrategy");
exports.LAST_WRITER_WINS_COMMIT_STRATEGY = 'lastWriterWins';
/**
 * LastWriterWinsCommitStrategy implements the 'lastWriterWins' commit strategy, based off the 'basic' commit strategy
 */
var LastWriterWinsCommitStrategy = /** @class */ (function (_super) {
    __extends(LastWriterWinsCommitStrategy, _super);
    function LastWriterWinsCommitStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LastWriterWinsCommitStrategy.prototype.resolveObject = function (objectId, commits) {
        // reduce to only those of the right object
        var lastWriterWins = this.filterCommits(objectId, exports.LAST_WRITER_WINS_COMMIT_STRATEGY, commits);
        // get the latest commit
        var latestCommit = BasicCommitStrategy_1.default.findLatestCommit(lastWriterWins);
        var earliestCommit = BasicCommitStrategy_1.default.findCreateCommit(objectId, lastWriterWins);
        if (!earliestCommit) {
            throw new Error('Cannot construct object: missing create commit');
        }
        var latestMeta = latestCommit.getHeaders();
        var staticMetadata = earliestCommit.getHeaders();
        var metadata = {
            interface: staticMetadata.interface,
            context: staticMetadata.context,
            type: staticMetadata.type,
            id: objectId,
            created_by: staticMetadata.iss,
            created_at: staticMetadata.committed_at,
            sub: staticMetadata.sub,
            commit_strategy: exports.LAST_WRITER_WINS_COMMIT_STRATEGY,
            meta: latestMeta.meta,
        };
        return {
            metadata: metadata,
            data: latestCommit.getPayload(),
        };
    };
    return LastWriterWinsCommitStrategy;
}(CommitStrategy_1.default));
exports.default = LastWriterWinsCommitStrategy;
//# sourceMappingURL=LastWriterWinsCommitStrategy.js.map