"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CommitStrategy_1 = require("./CommitStrategy");
var CommitOperation_1 = require("../commits/CommitOperation");
exports.BASIC_COMMIT_STRATEGY = 'basic';
/**
 * BasicCommitStrategy implements the 'basic' commit strategy
 */
var BasicCommitStrategy = /** @class */ (function (_super) {
    __extends(BasicCommitStrategy, _super);
    function BasicCommitStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BasicCommitStrategy.prototype.resolveObject = function (objectId, commits) {
        // reduce to only those of the right object
        var basicCommits = this.filterCommits(objectId, exports.BASIC_COMMIT_STRATEGY, commits);
        // get the latest commit
        var latestCommit = BasicCommitStrategy.findLatestCommit(basicCommits);
        var earliestCommit = BasicCommitStrategy.findCreateCommit(objectId, basicCommits);
        if (!earliestCommit) {
            throw new Error('Cannot construct object: missing create commit');
        }
        var latestMeta = latestCommit.getHeaders();
        var staticMetadata = earliestCommit.getHeaders();
        var metadata = {
            interface: staticMetadata.interface,
            context: staticMetadata.context,
            type: staticMetadata.type,
            id: objectId,
            created_by: staticMetadata.iss,
            created_at: staticMetadata.committed_at,
            sub: staticMetadata.sub,
            commit_strategy: exports.BASIC_COMMIT_STRATEGY,
            meta: latestMeta.meta,
        };
        return {
            metadata: metadata,
            data: latestCommit.getPayload(),
        };
    };
    /**
     * Gets the correct create commit given the objectId
     * @param commits All commits to search through
     */
    BasicCommitStrategy.findCreateCommit = function (objectId, commits) {
        var possibleCreates = commits.filter(function (commit) {
            var commitRev = commit.getHeaders().rev;
            return commit.getProtectedHeaders().operation === CommitOperation_1.default.Create &&
                (commitRev === objectId) === (commitRev !== undefined);
        });
        return possibleCreates.length > 0 ? possibleCreates[0] : undefined;
    };
    /**
     * Gets the latest logical commit
     * @param commits All commits to search through
     */
    BasicCommitStrategy.findLatestCommit = function (commits) {
        return commits.reduce(function (latestCommit, currentCommit) {
            if (latestCommit) {
                if (latestCommit.getProtectedHeaders().operation === currentCommit.getProtectedHeaders().operation) {
                    // the commit is of the same type and must be decided by datetime
                    var latestDate = Date.parse(latestCommit.getHeaders().committed_at);
                    var currentDate = Date.parse(currentCommit.getHeaders().committed_at);
                    // if the commit times are the same, defer to lexigraphical rev order
                    if (latestDate === currentDate &&
                        latestCommit.getHeaders().rev < currentCommit.getHeaders().rev) {
                        return currentCommit;
                    }
                    // latest datetime wins
                    if (latestDate < currentDate) {
                        return currentCommit;
                    }
                    return latestCommit;
                }
                // we can assume the latestCommit is NOT whatever the currentCommit is
                switch (currentCommit.getProtectedHeaders().operation) {
                    case CommitOperation_1.default.Delete:
                        return currentCommit;
                    case CommitOperation_1.default.Update:
                        if (latestCommit.getProtectedHeaders().operation !== CommitOperation_1.default.Delete) {
                            return currentCommit;
                        }
                }
                return latestCommit;
            }
            return currentCommit;
        });
    };
    return BasicCommitStrategy;
}(CommitStrategy_1.default));
exports.default = BasicCommitStrategy;
//# sourceMappingURL=BasicCommitStrategy.js.map