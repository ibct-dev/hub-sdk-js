/// <reference types="node" />
import { BigIntegerStatic } from 'big-integer';
import DidKey from './DidKey';
import { KeyType } from './KeyType';
import { KeyUse } from './KeyUse';
/**
 * Class to model a pairwise key
 */
export default class PairwiseKey {
    /**
     * Get the index for pairwise key
     */
    private _id;
    /**
     * Get the pairwise id
     */
    private _peerId;
    /**
     * Get the number of prime tests
     */
    private _numberOfPrimeTests;
    /**
     * Get the pairwise key
     */
    private _key;
    /**
     * Buffer used for prime generation
     */
    private _deterministicKey;
    /**
     * Get the id for the pairwise key
     */
    readonly id: string;
    /**
     * Get the id for the pairwise key
     */
    readonly key: DidKey | undefined;
    /**
     * Get the number of tests needed for prime generation
     */
    readonly primeTests: number;
    /**
     * Create an instance of PairwiseKey.
     * @param did The DID.
     * @param peerId The peer id.
     */
    constructor(did: string, peerId: string);
    /**
     * Generate the pairwise Key.
     * @param didMasterKey The master key for this did.
     * @param crypto The crypto object.
     * @param algorithm Intended algorithm to use for the key.
     * @param keyType Key type.
     * @param keyUse Key usage.
     * @param exportable True if the key is exportable.
     */
    generate(didMasterKey: Buffer, crypto: any, algorithm: any, keyType: KeyType, keyUse: KeyUse, exportable?: boolean): Promise<DidKey>;
    /**
     * Generate a deterministic number that can be used as prime
     * @param crypto The crypto object.
     * @param keySize Desired key size
     * @param didMasterKey The DID master key
     * @param peerId The peer id
     */
    generateDeterministicNumberForPrime(crypto: any, primeSize: number, didMasterKey: Buffer, peerId: Buffer): Promise<Buffer>;
    /**
     * Generate a hash used as component for prime number
     * @param crypto The crypto object.
     * @param inx Round number
     * @param key Signature key
     * @param data Data to sign
     */
    private generateHashForPrime;
    /**
     * Execute all rounds
     * @param rounds Array of functions to execute
     * @param inx Current step
     * @param key Key to sign
     * @param data Data to sign
     */
    private executeRounds;
    /**
     * Generate a prime number from the seed.
     * isProbablyPrime is based on the Miller-Rabin prime test.
     * @param primeSeed seed for prime generator
     */
    generatePrime(primeSeed: Array<number>): BigIntegerStatic;
    /**
     * Generate the RSA pairwise Key.
     * @param didMasterKey The master key for this did.
     * @param crypto The crypto object.
     * @param algorithm Intended algorithm to use for the key.
     * @param keyUse Key usage.
     * @param exportable True if the key is exportable.
     */
    private generateRsaPairwiseKey;
    /**
     * Uses primeBase as reference and generate the closest prime number
     */
    private getPrime;
    /**
     * Convert big number to base64 url.
     * @param bigNumber Number to convert
     */
    private toBase;
    /**
     * Generate the EC pairwise Key.
     * @param didMasterKey The master key for this did.
     * @param crypto The crypto object.
     * @param algorithm Intended algorithm to use for the key.
     * @param exportable True if the key is exportable.
     */
    private generateEcPairwiseKey;
}
